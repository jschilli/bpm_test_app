/* ===========================================================================
   BPM Combined Asset File
   MANIFEST: sproutcore-handlebars (2.0.beta.3)
   This file is generated automatically by the bpm (http://www.bpmjs.org)
   =========================================================================*/

spade.register("sproutcore-handlebars/~tests/controls/button_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar button, application;\n\nvar get = SC.get, set = SC.set;\n\nmodule(\"SC.Button\", {\n  setup: function() {\n    application = SC.Application.create();\n    button = SC.Button.create();\n  },\n\n  teardown: function() {\n    button.destroy();\n    application.destroy();\n  }\n});\n\nfunction synthesizeEvent(type, view) {\n  view.$().trigger(type);\n}\n\ntest(\"should trigger an action when clicked\", function() {\n  var wasClicked = false;\n\n  var actionObject = SC.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  SC.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n});\n\ntest(\"should trigger an action on a String target when clicked\", function() {\n  var wasClicked = false;\n\n  window.MyApp = {\n    myActionObject: SC.Object.create({\n      myAction: function() {\n        wasClicked = true;\n      }\n    })\n  };\n\n  var button = SC.Button.create({\n    target: 'MyApp.myActionObject',\n    action: 'myAction'\n  });\n\n  SC.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n\n  window.MyApp = undefined;\n});\n\ntest(\"should not trigger action if mouse leaves area before mouseup\", function() {\n  var wasClicked = false;\n\n  var actionObject = SC.Object.create({\n    myAction: function() {\n      wasClicked = true;\n    }\n  });\n\n  button.set('target', actionObject);\n  button.set('action', 'myAction');\n\n  SC.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  synthesizeEvent('mousedown', button);\n  ok(get(button, 'isActive'), \"becomes active when hovered\");\n  ok(button.$().hasClass('is-active'));\n  synthesizeEvent('mouseleave', button);\n  ok(!get(button, 'isActive'), \"loses active state if mouse exits\");\n  ok(!button.$().hasClass('is-active'));\n  synthesizeEvent('mouseup', button);\n\n  ok(!wasClicked);\n\n  wasClicked = false;\n\n  synthesizeEvent('mousedown', button);\n  synthesizeEvent('mouseleave', button);\n  synthesizeEvent('mouseenter', button);\n  synthesizeEvent('mouseup', button);\n\n  ok(wasClicked);\n});\n\ntest(\"should by default be of type='button'\", function() {\n  SC.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n\n  equals(button.$().attr('type'), 'button');\n});\n\ntest(\"should have a configurable type\", function() {\n  button.set('type', 'submit');\n\n  SC.run(function() {\n    button.appendTo('#qunit-fixture');\n  });\n  \n  equals(button.$().attr('type'), 'submit');\n});\n\ntest(\"should allow the target to be the parentView\", function() {\n  button.set('target', 'parentView');\n  \n  equals(button.parentView, button.get('targetObject'));\n});\n\n});");spade.register("sproutcore-handlebars/~tests/controls/checkbox_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n\nvar get = SC.get, set = SC.set, checkboxView, application;\n\nmodule(\"SC.Checkbox\", {\n  setup: function() {\n    application = SC.Application.create();\n  },\n  teardown: function() {\n    checkboxView.destroy();\n    application.destroy();\n  }\n});\n\nfunction setAndFlush(view, key, value) {\n  SC.run(function() {\n    SC.set(view, key, value);\n  });\n}\n\ntest(\"value property mirrors input value\", function() {\n  checkboxView = SC.Checkbox.create({});\n  SC.run(function() { checkboxView.append(); });\n\n  equals(get(checkboxView, 'value'), false, \"initially starts with a false value\");\n  equals(!!checkboxView.$('input').prop('checked'), false, \"the initial checked property is false\");\n\n  setAndFlush(checkboxView, 'value', true);\n\n  equals(checkboxView.$('input').prop('checked'), true, \"changing the value property changes the DOM\");\n\n  checkboxView.remove();\n  SC.run(function() { checkboxView.append(); });\n\n  equals(checkboxView.$('input').prop('checked'), true, \"changing the value property changes the DOM\");\n\n  SC.run(function() { checkboxView.remove(); });\n  SC.run(function() { set(checkboxView, 'value', false); });\n  SC.run(function() { checkboxView.append(); });\n\n  equals(checkboxView.$('input').prop('checked'), false, \"changing the value property changes the DOM\");\n});\n\ntest(\"value property mirrors input value\", function() {\n  checkboxView = SC.Checkbox.create({ value: true });\n  SC.run(function() { checkboxView.append(); });\n\n  equals(get(checkboxView, 'value'), true, \"precond - initially starts with a true value\");\n  equals(!!checkboxView.$('input').prop('checked'), true, \"the initial checked property is true\");\n\n  setAndFlush(checkboxView, 'value', false);\n\n  equals(!!checkboxView.$('input').prop('checked'), false, \"changing the value property changes the DOM\");\n\n  SC.run(function() { checkboxView.remove(); });\n  SC.run(function() { checkboxView.append(); });\n\n  equals(checkboxView.$('input').prop('checked'), false, \"changing the value property changes the DOM\");\n\n  SC.run(function() { checkboxView.remove(); });\n  setAndFlush(checkboxView, 'value', true);\n  SC.run(function() { checkboxView.append(); });\n\n  equals(checkboxView.$('input').prop('checked'), true, \"changing the value property changes the DOM\");\n});\n\ntest(\"checking the checkbox updates the value\", function() {\n  checkboxView = SC.Checkbox.create({ value: true });\n  SC.run(function() { checkboxView.appendTo('#qunit-fixture'); });\n\n  equals(get(checkboxView, 'value'), true, \"precond - initially starts with a true value\");\n  equals(!!checkboxView.$('input').attr('checked'), true, \"precond - the initial checked property is true\");\n\n  // Can't find a way to programatically trigger a checkbox in IE and have it generate the\n  // same events as if a user actually clicks.\n  if (!jQuery.browser.msie) {\n    checkboxView.$('input')[0].click();\n  } else {\n    checkboxView.$('input').trigger('click');\n    checkboxView.$('input').removeAttr('checked').trigger('change');\n  }\n\n  equals(checkboxView.$('input').prop('checked'), false, \"after clicking a checkbox, the checked property changed\");\n  equals(get(checkboxView, 'value'), false, \"changing the checkbox causes the view's value to get updated\");\n});\n\n\n});");spade.register("sproutcore-handlebars/~tests/controls/text_area_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TestObject */\n\n\nvar textArea;\nvar get = SC.get, set = SC.set;\n\nmodule(\"SC.TextArea\", {\n  setup: function() {\n    TestObject = SC.Object.create({\n      value: null\n    });\n\n    textArea = SC.TextArea.create();\n  },\n\n  teardown: function() {\n    textArea.destroy();\n    TestObject = textArea = null;\n  }\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  SC.run(function() {\n    set(textArea, 'value', 'foo');\n    textArea.append();\n  });\n\n  equals(textArea.$().val(), \"foo\", \"renders text field with value\");\n\n  SC.run(function() { set(textArea, 'value', 'bar'); });\n\n  equals(textArea.$().val(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input placeholder is updated when setting placeholder property of view\", function() {\n  SC.run(function() {\n    set(textArea, 'placeholder', 'foo');\n    textArea.append();\n  });\n\n  equals(textArea.$().attr('placeholder'), \"foo\", \"renders text field with placeholder\");\n\n  SC.run(function() { set(textArea, 'placeholder', 'bar'); });\n\n  equals(textArea.$().attr('placeholder'), \"bar\", \"updates text field after placeholder changes\");\n});\n\ntest(\"value binding works properly for inputs that haven't been created\", function() {\n\n  SC.run(function() {\n    textArea = SC.TextArea.create({\n      valueBinding: 'TestObject.value'\n    });\n  });\n\n  equals(get(textArea, 'value'), null, \"precond - default value is null\");\n  equals(textArea.$().length, 0, \"precond - view doesn't have its layer created yet, thus no input element\");\n\n  SC.run(function() {\n    set(TestObject, 'value', 'ohai');\n  });\n\n  equals(get(textArea, 'value'), 'ohai', \"value property was properly updated\");\n\n  SC.run(function() { textArea.append(); });\n\n  equals(get(textArea, 'value'), 'ohai', \"value property remains the same once the view has been appended\");\n  equals(textArea.$().val(), 'ohai', \"value is reflected in the input element once it is created\");\n});\n\ntest(\"should call the insertNewline method when return key is pressed\", function() {\n  var wasCalled;\n  var event = SC.Object.create({\n    keyCode: 13\n  });\n\n  textArea.insertNewline = function() {\n    wasCalled = true;\n  };\n\n  textArea.keyUp(event);\n  ok(wasCalled, \"invokes insertNewline method\");\n});\n\ntest(\"should call the cancel method when escape key is pressed\", function() {\n  var wasCalled;\n  var event = SC.Object.create({\n    keyCode: 27\n  });\n\n  textArea.cancel = function() {\n    wasCalled = true;\n  };\n\n  textArea.keyUp(event);\n  ok(wasCalled, \"invokes cancel method\");\n});\n\n// test(\"listens for focus and blur events\", function() {\n//   var focusCalled = 0;\n//   var blurCalled = 0;\n\n//   textArea.focus = function() {\n//     focusCalled++;\n//   };\n//   textArea.blur = function() {\n//     blurCalled++;\n//   };\n\n//   equals(focusCalled+blurCalled, 0, \"precond - no callbacks called yet\");\n\n//   textArea.$().focus();\n//   equals(focusCalled, 1, \"focus called after field receives focus\");\n\n//   textArea.$().blur();\n//   equals(blurCalled, 1, \"blur alled after field blurs\");\n// });\n\n// test(\"calls correct method for key events\", function() {\n//   var insertNewlineCalled = 0;\n//   var cancelCalled = 0;\n\n//   textArea.insertNewline = function() {\n//     insertNewlineCalled++;\n//     return YES;\n//   };\n//   textArea.cancel = function() {\n//     cancelCalled++;\n//     return YES;\n//   };\n\n//   textArea.$().focus();\n//   equals(insertNewlineCalled+cancelCalled, 0, \"precond - no callbacks called yet\");\n\n//   SC.RootResponder.responder.keyup(new SC.Event({ type: 'keyup', keyCode: 13 }));\n//   equals(insertNewlineCalled, 1, \"calls insertNewline after hitting return\");\n\n//   SC.RootResponder.responder.keyup(new SC.Event({ type: 'keyup', keyCode: 27 }));\n//   equals(cancelCalled, 1, \"calls cancel after pressing escape key\");\n// });\n\n\n});");spade.register("sproutcore-handlebars/~tests/controls/text_field_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TestObject */\n\n\nvar textField;\nvar get = SC.get, set = SC.set;\n\nmodule(\"SC.TextField\", {\n  setup: function() {\n    TestObject = SC.Object.create({\n      value: null\n    });\n\n    textField = SC.TextField.create();\n  },\n\n  teardown: function() {\n    textField.destroy();\n    TestObject = textField = null;\n  }\n});\n\ntest(\"input value is updated when setting value property of view\", function() {\n  SC.run(function() {\n    set(textField, 'value', 'foo');\n    textField.append();\n  });\n\n  equals(textField.$().val(), \"foo\", \"renders text field with value\");\n\n  SC.run(function() { set(textField, 'value', 'bar'); });\n\n  equals(textField.$().val(), \"bar\", \"updates text field after value changes\");\n});\n\ntest(\"input placeholder is updated when setting placeholder property of view\", function() {\n  SC.run(function() {\n    set(textField, 'placeholder', 'foo');\n    textField.append();\n  });\n\n  equals(textField.$().attr('placeholder'), \"foo\", \"renders text field with placeholder\");\n\n  SC.run(function() { set(textField, 'placeholder', 'bar'); });\n\n  equals(textField.$().attr('placeholder'), \"bar\", \"updates text field after placeholder changes\");\n});\n\ntest(\"input type is configurable when creating view\", function() {\n  SC.run(function() {\n    set(textField, 'type', 'password');\n    textField.append();\n  });\n\n  equals(textField.$().attr('type'), 'password', \"renders text field with type\");\n});\n\ntest(\"value binding works properly for inputs that haven't been created\", function() {\n\n  SC.run(function() {\n    textField = SC.TextField.create({\n      valueBinding: 'TestObject.value'\n    });\n  });\n\n  equals(get(textField, 'value'), null, \"precond - default value is null\");\n  equals(textField.$().length, 0, \"precond - view doesn't have its layer created yet, thus no input element\");\n\n  SC.run(function() {\n    set(TestObject, 'value', 'ohai');\n  });\n\n  equals(get(textField, 'value'), 'ohai', \"value property was properly updated\");\n\n  SC.run(function() { textField.append(); });\n\n  equals(get(textField, 'value'), 'ohai', \"value property remains the same once the view has been appended\");\n  equals(textField.$().val(), 'ohai', \"value is reflected in the input element once it is created\");\n});\n\ntest(\"should call the insertNewline method when return key is pressed\", function() {\n  var wasCalled;\n  var event = SC.Object.create({\n    keyCode: 13\n  });\n\n  textField.insertNewline = function() {\n    wasCalled = true;\n  };\n\n  textField.keyUp(event);\n  ok(wasCalled, \"invokes insertNewline method\");\n});\n\ntest(\"should call the cancel method when escape key is pressed\", function() {\n  var wasCalled;\n  var event = SC.Object.create({\n    keyCode: 27\n  });\n\n  textField.cancel = function() {\n    wasCalled = true;\n  };\n\n  textField.keyUp(event);\n  ok(wasCalled, \"invokes cancel method\");\n});\n\n// test(\"listens for focus and blur events\", function() {\n//   var focusCalled = 0;\n//   var blurCalled = 0;\n\n//   textField.focus = function() {\n//     focusCalled++;\n//   };\n//   textField.blur = function() {\n//     blurCalled++;\n//   };\n\n//   equals(focusCalled+blurCalled, 0, \"precond - no callbacks called yet\");\n\n//   textField.$().focus();\n//   equals(focusCalled, 1, \"focus called after field receives focus\");\n\n//   textField.$().blur();\n//   equals(blurCalled, 1, \"blur alled after field blurs\");\n// });\n\n// test(\"calls correct method for key events\", function() {\n//   var insertNewlineCalled = 0;\n//   var cancelCalled = 0;\n\n//   textField.insertNewline = function() {\n//     insertNewlineCalled++;\n//     return YES;\n//   };\n//   textField.cancel = function() {\n//     cancelCalled++;\n//     return YES;\n//   };\n\n//   textField.$().focus();\n//   equals(insertNewlineCalled+cancelCalled, 0, \"precond - no callbacks called yet\");\n\n//   SC.RootResponder.responder.keyup(new SC.Event({ type: 'keyup', keyCode: 13 }));\n//   equals(insertNewlineCalled, 1, \"calls insertNewline after hitting return\");\n\n//   SC.RootResponder.responder.keyup(new SC.Event({ type: 'keyup', keyCode: 27 }));\n//   equals(cancelCalled, 1, \"calls cancel after pressing escape key\");\n// });\n\n\n});");spade.register("sproutcore-handlebars/~tests/handlebars_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TemplateTests */\n\n\nvar getPath = SC.getPath, setPath = SC.setPath, get = SC.get, set = SC.set;\n\n(function() {\n\n  jQuery.fn.caretPosition = function() {\n      var ctrl = this[0];\n\n      var CaretPos = 0;\n      // IE Support\n      if (document.selection) {\n\n          ctrl.focus();\n          var Sel = document.selection.createRange ();\n\n          Sel.moveStart ('character', -ctrl.value.length);\n\n          CaretPos = Sel.text.length;\n      }\n      // Firefox support\n      else if (ctrl.selectionStart || ctrl.selectionStart == '0') {\n          CaretPos = ctrl.selectionStart;\n      }\n\n      return (CaretPos);\n  };\n\n\n  jQuery.fn.setCaretPosition = function(pos) {\n      var ctrl = this[0];\n\n      if(ctrl.setSelectionRange) {\n          ctrl.focus();\n          ctrl.setSelectionRange(pos,pos);\n      } else if (ctrl.createTextRange) {\n          var range = ctrl.createTextRange();\n          range.collapse(true);\n          range.moveEnd('character', pos);\n          range.moveStart('character', pos);\n          range.select();\n      }\n  }\n\n})();\n\n/**\n  This module specifically tests integration with Handlebars and SproutCore-specific\n  Handlebars extensions.\n\n  If you add additional template support to SC.View, you should create a new\n  file in which to test.\n*/\nmodule(\"SC.View - handlebars integration\", {\n  setup: function() {\n    window.TemplateTests = SC.Namespace.create();\n  },\n\n  teardown: function() {\n    if (view) view.destroy();\n    window.TemplateTests = undefined;\n  }\n});\n\ntest(\"template view should call the function of the associated template\", function() {\n  view = SC.View.create({\n    templateName: 'test_template',\n    templates: SC.Object.create({\n      test_template: SC.Handlebars.compile(\"<h1 id='twas-called'>template was called</h1>\")\n    })\n  });\n\n  view.createElement();\n\n  ok(view.$('#twas-called').length, \"the named template was called\");\n});\n\ntest(\"template view should call the function of the associated template with itself as the context\", function() {\n  view = SC.View.create({\n    templateName: 'test_template',\n\n    _personName: \"Tom DAAAALE\",\n    _i: 0,\n\n    personName: function() {\n      this._i++;\n      return this._personName + this._i;\n    }.property().cacheable(),\n\n    templates: SC.Object.create({\n      test_template: SC.Handlebars.compile(\"<h1 id='twas-called'>template was called for {{personName}}. Yea {{personName}}</h1>\")\n    })\n  });\n\n  view.createElement();\n\n  equals(\"template was called for Tom DAAAALE1. Yea Tom DAAAALE1\", view.$('#twas-called').text(), \"the named template was called with the view as the data source\");\n});\n\ntest(\"should allow values from normal JavaScript hash objects to be used\", function() {\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#with person}}{{firstName}} {{lastName}} (and {{pet.name}}){{/with}}'),\n\n    person: {\n      firstName: 'Señor',\n      lastName: 'CFC',\n      pet: {\n        name: 'Fido'\n      }\n    }\n  });\n\n  view.createElement();\n\n  equals(view.$().text(), \"Señor CFC (and Fido)\", \"prints out values from a hash\");\n});\n\ntest(\"should escape HTML in normal mustaches\", function() {\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{output}}'),\n    output: \"you need to be more <b>bold</b>\"\n  });\n\n  view.createElement();\n  equals(view.$('b').length, 0, \"does not create an element\");\n  equals(view.$().text(), 'you need to be more <b>bold</b>', \"inserts entities, not elements\");\n\n  SC.run(function() { set(view, 'output', \"you are so <i>super</i>\"); });\n  equals(view.$().text(), 'you are so <i>super</i>', \"updates with entities, not elements\");\n  equals(view.$('i').length, 0, \"does not create an element when value is updated\");\n});\n\ntest(\"should not escape HTML in triple mustaches\", function() {\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{{output}}}'),\n    output: \"you need to be more <b>bold</b>\"\n  });\n\n  SC.run(function() {\n    view.createElement();\n  });\n\n  equals(view.$('b').length, 1, \"creates an element\");\n\n  SC.run(function() {\n    set(view, 'output', \"you are so <i>super</i>\");\n  });\n\n  equals(view.$('i').length, 1, \"creates an element when value is updated\");\n});\n\nTemplateTests = {};\n\ntest(\"child views can be inserted using the {{view}} Handlebars helper\", function() {\n  var templates = SC.Object.create({\n    nester: SC.Handlebars.compile(\"<h1 id='hello-world'>Hello {{world}}</h1>{{view \\\"TemplateTests.LabelView\\\"}}\"),\n    nested: SC.Handlebars.compile(\"<div id='child-view'>Goodbye {{cruel}} {{world}}</div>\")\n  });\n\n  TemplateTests.LabelView = SC.View.extend({\n    tagName: \"aside\",\n    cruel: \"cruel\",\n    world: \"world?\",\n    templateName: 'nested',\n    templates: templates\n  });\n\n  view = SC.View.create({\n    world: \"world!\",\n    templateName: 'nester',\n    templates: templates\n  });\n\n  view.createElement();\n\n  ok(view.$(\"#hello-world:contains('Hello world!')\").length, \"The parent view renders its contents\");\n  ok(view.$(\"#child-view:contains('Goodbye cruel world?')\").length === 1, \"The child view renders its content once\");\n  ok(view.$().text().match(/Hello world!.*Goodbye cruel world\\?/), \"parent view should appear before the child view\");\n});\n\ntest(\"should accept relative paths to views\", function() {\n  view = SC.View.create({\n    template: SC.Handlebars.compile('Hey look, at {{view \".myCool.view\"}}'),\n\n    myCool: SC.Object.create({\n      view: SC.View.extend({\n        template: SC.Handlebars.compile(\"my cool view\")\n      })\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$().text(), \"Hey look, at my cool view\");\n});\n\ntest(\"child views can be inserted inside a bind block\", function() {\n  var templates = SC.Object.create({\n    nester: SC.Handlebars.compile(\"<h1 id='hello-world'>Hello {{world}}</h1>{{view \\\"TemplateTests.BQView\\\"}}\"),\n    nested: SC.Handlebars.compile(\"<div id='child-view'>Goodbye {{#with content}}{{blah}} {{view \\\"TemplateTests.OtherView\\\"}}{{/with}} {{world}}</div>\"),\n    other: SC.Handlebars.compile(\"cruel\")\n  });\n\n  TemplateTests.BQView = SC.View.extend({\n    tagName: \"blockquote\",\n    cruel: \"cruel\",\n    world: \"world?\",\n    content: SC.Object.create({ blah: \"wot\" }),\n    templateName: 'nested',\n    templates: templates\n  });\n\n  TemplateTests.OtherView = SC.View.extend({\n    templates: templates,\n    templateName: 'other'\n  });\n\n  view = SC.View.create({\n    world: \"world!\",\n    templateName: 'nester',\n    templates: templates\n  });\n\n  view.createElement();\n\n  ok(view.$(\"#hello-world:contains('Hello world!')\").length, \"The parent view renders its contents\");\n  ok(view.$(\"blockquote\").text().match(/Goodbye.*wot.*cruel.*world\\?/), \"The child view renders its content once\");\n  ok(view.$().text().match(/Hello world!.*Goodbye.*wot.*cruel.*world\\?/), \"parent view should appear before the child view\");\n});\n\ntest(\"SC.View should update when a property changes and the bind helper is used\", function() {\n  var templates = SC.Object.create({\n   foo: SC.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{bind \"wham\"}}{{/with}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: SC.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  SC.run(function() {\n    view.append();\n  });\n\n  equals(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  SC.run(function() { set(get(view, 'content'), 'wham', 'bazam'); });\n  equals(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"SC.View should update when a property changes and no bind helper is used\", function() {\n  var templates = SC.Object.create({\n   foo: SC.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{wham}}{{/with}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: SC.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  SC.run(function() { set(get(view, 'content'), 'wham', 'bazam'); });\n\n  equals(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"SC.View should update when the property used with the #with helper changes\", function() {\n  var templates = SC.Object.create({\n   foo: SC.Handlebars.compile('<h1 id=\"first\">{{#with content}}{{wham}}{{/with}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: SC.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\"\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('#first').text(), \"bam\", \"precond - view renders Handlebars template\");\n\n  SC.run(function() {\n    set(view, 'content', SC.Object.create({\n      wham: 'bazam'\n    }));\n  });\n\n  equals(view.$('#first').text(), \"bazam\", \"view updates when a bound property changes\");\n});\n\ntest(\"should not update when a property is removed from the view\", function() {\n  var templates = SC.Object.create({\n    foo: SC.Handlebars.compile('<h1 id=\"first\">{{#bind \"content\"}}{{#bind \"foo\"}}{{bind \"baz\"}}{{/bind}}{{/bind}}</h1>')\n  });\n  var removeCalled = 0;\n  var origRemove;\n  function swapRemove() {\n    if (origRemove) {\n      SC.removeObserver = origRemove;\n      origRemove = null;\n    } else {\n      origRemove = SC.removeObserver;\n      SC.removeObserver = function(property, func) {\n        removeCalled++;\n        return origRemove.apply(this, arguments);\n      };\n    }\n  }\n\n  swapRemove();\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: SC.Object.create({\n      foo: SC.Object.create({\n        baz: \"unicorns\"\n      })\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('#first').text(), \"unicorns\", \"precond - renders the bound value\");\n\n  var oldContent = get(view, 'content');\n\n  SC.run(function() {\n    set(view, 'content', SC.Object.create({\n      foo: SC.Object.create({\n        baz: \"ninjas\"\n      })\n    }));\n  });\n\n  equals(view.$('#first').text(), 'ninjas', \"updates to new content value\");\n\n  SC.run(function() {\n    setPath(oldContent, 'foo.baz', 'rockstars');\n  });\n\n  SC.run(function() {\n    setPath(oldContent, 'foo.baz', 'ewoks');\n  });\n\n  swapRemove();\n\n  equals(removeCalled, 1, \"does not try to remove observer more than once\");\n  equals(view.$('#first').text(), \"ninjas\", \"does not update removed object\");\n});\n\ntest(\"Handlebars templates update properties if a content object changes\", function() {\n  var templates;\n\n  templates = SC.Object.create({\n    menu: SC.Handlebars.compile('<h1>Today\\'s Menu</h1>{{#bind \"coffee\"}}<h2>{{color}} coffee</h2><span id=\"price\">{{bind \"price\"}}</span>{{/bind}}')\n  });\n\n  SC.run(function() {\n    view = SC.View.create({\n      templateName: 'menu',\n      templates: templates,\n\n      coffee: SC.Object.create({\n        color: 'brown',\n        price: '$4'\n      })\n    });\n  });\n\n  SC.run(function() {\n    view.append();\n  });\n\n  equals(view.$('h2').text(), \"brown coffee\", \"precond - renders color correctly\");\n  equals(view.$('#price').text(), '$4', \"precond - renders price correctly\");\n\n  SC.run(function() {\n    set(view, 'coffee', SC.Object.create({\n      color: \"mauve\",\n      price: \"$4.50\"\n    }));\n  });\n\n  equals(view.$('h2').text(), \"mauve coffee\", \"should update name field when content changes\");\n  equals(view.$('#price').text(), \"$4.50\", \"should update price field when content changes\");\n\n  SC.run(function() {\n    set(view, 'coffee', SC.Object.create({\n      color: \"mauve\",\n      price: \"$5.50\"\n    }));\n  });\n\n  equals(view.$('h2').text(), \"mauve coffee\", \"should update name field when content changes\");\n  equals(view.$('#price').text(), \"$5.50\", \"should update price field when content changes\");\n\n  SC.run(function() {\n    setPath(view, 'coffee.price', \"$5\");\n  });\n\n  equals(view.$('#price').text(), \"$5\", \"should update price field when price property is changed\");\n\n  view.destroy();\n});\n\ntest(\"Template updates correctly if a path is passed to the bind helper\", function() {\n  var templates;\n\n  templates = SC.Object.create({\n    menu: SC.Handlebars.compile('<h1>{{bind \"coffee.price\"}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    coffee: SC.Object.create({\n      price: '$4'\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('h1').text(), \"$4\", \"precond - renders price\");\n\n  SC.run(function() {\n    setPath(view, 'coffee.price', \"$5\");\n  });\n\n  equals(view.$('h1').text(), \"$5\", \"updates when property changes\");\n\n  SC.run(function() {\n    set(view, 'coffee', { price: \"$6\" });\n  });\n\n  equals(view.$('h1').text(), \"$6\", \"updates when parent property changes\");\n});\n\n// test(\"Template updates correctly if a path is passed to the bind helper and the context object is an SC.ObjectController\", function() {\n//   var templates;\n\n//   templates = SC.Object.create({\n//     menu: SC.Handlebars.compile('<h1>{{bind \"coffee.price\"}}</h1>')\n//   });\n\n//   var controller = SC.ObjectController.create();\n//   var realObject = SC.Object.create({\n//     price: \"$4\"\n//   });\n\n//   set(controller, 'content', realObject);\n\n//   var view = SC.View.create({\n//     templateName: 'menu',\n//     templates: templates,\n\n//     coffee: controller\n//   });\n\n//   view.createElement();\n\n//   equals(view.$('h1').text(), \"$4\", \"precond - renders price\");\n\n//   set(realObject, 'price', \"$5\");\n\n//   equals(view.$('h1').text(), \"$5\", \"updates when property is set on real object\");\n\n//   SC.run(function() {\n//     set(controller, 'price', \"$6\" );\n//   });\n\n//   equals(view.$('h1').text(), \"$6\", \"updates when property is set on object controller\");\n// });\n\ntest(\"should update the block when object passed to #if helper changes\", function() {\n  var templates;\n\n  templates = SC.Object.create({\n    menu: SC.Handlebars.compile('<h1>{{#if inception}}{{INCEPTION}}{{/if}}</h1>')\n  });\n\n  var view = SC.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    INCEPTION: \"BOOOOOOOONG doodoodoodoodooodoodoodoo\",\n    inception: 'OOOOoooooOOOOOOooooooo'\n  });\n\n  view.createElement();\n\n  equals(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"renders block if a string\");\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  tests.forEach(function(val) {\n    SC.run(function() {\n      set(view, 'inception', val);\n    });\n\n    equals(view.$('h1').text(), '', \"hides block when conditional is '%@'\".fmt(val));\n\n    SC.run(function() {\n      set(view, 'inception', true);\n    });\n\n    equals(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"precond - renders block when conditional is true\");\n  });\n});\n\ntest(\"should update the block when object passed to #unless helper changes\", function() {\n  var templates;\n\n  templates = SC.Object.create({\n    advice: SC.Handlebars.compile('<h1>{{#unless onDrugs}}{{doWellInSchool}}{{/unless}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'advice',\n    templates: templates,\n\n    onDrugs: true,\n    doWellInSchool: \"Eat your vegetables\"\n  });\n\n  view.createElement();\n\n  equals(view.$('h1').text(), \"\", \"hides block if true\");\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  tests.forEach(function(val) {\n    SC.run(function() {\n      set(view, 'onDrugs', val);\n    });\n\n    equals(view.$('h1').text(), 'Eat your vegetables', \"renders block when conditional is '%@'; %@\".fmt(val, SC.typeOf(val)));\n\n    SC.run(function() {\n      set(view, 'onDrugs', true);\n    });\n\n    equals(view.$('h1').text(), \"\", \"precond - hides block when conditional is true\");\n  });\n});\n\ntest(\"should update the block when object passed to #if helper changes and an inverse is supplied\", function() {\n  var templates;\n\n  templates = SC.Object.create({\n    menu: SC.Handlebars.compile('<h1>{{#if inception}}{{INCEPTION}}{{else}}{{SAD}}{{/if}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'menu',\n    templates: templates,\n\n    INCEPTION: \"BOOOOOOOONG doodoodoodoodooodoodoodoo\",\n    inception: false,\n    SAD: 'BOONG?'\n  });\n\n  view.createElement();\n\n  equals(view.$('h1').text(), \"BOONG?\", \"renders alternate if false\");\n\n  SC.run(function() { set(view, 'inception', true); });\n\n  var tests = [false, null, undefined, [], '', 0];\n\n  tests.forEach(function(val) {\n    SC.run(function() {\n      set(view, 'inception', val);\n    });\n\n    equals(view.$('h1').text(), 'BOONG?', \"renders alternate if %@\".fmt(val));\n\n    SC.run(function() {\n      set(view, 'inception', true);\n    });\n\n    equals(view.$('h1').text(), \"BOOOOOOOONG doodoodoodoodooodoodoodoo\", \"precond - renders block when conditional is true\");\n  });\n});\n\n// test(\"Should insert a localized string if the {{loc}} helper is used\", function() {\n//   SC.stringsFor('en', {\n//     'Brazil': 'Brasilia'\n//   });\n\n//   templates = SC.Object.create({\n//     'loc': SC.Handlebars.compile('<h1>Country: {{loc \"Brazil\"}}')\n//   });\n\n//   var view = SC.View.create({\n//     templateName: 'loc',\n//     templates: templates,\n\n//     country: 'Brazil'\n//   });\n\n//   view.createElement();\n//   equals(view.$('h1').text(), 'Country: Brasilia', \"returns localized value\");\n// });\n\ntest(\"Template views return a no-op function if their template cannot be found\", function() {\n  view = SC.View.create({\n    templateName: 'cantBeFound'\n  });\n\n  raises(function() {\n    var template = get(view, 'template');\n\n    ok(SC.typeOf(template) === 'function', 'template should be a function');\n    equals(template(), '', 'should return an empty string');\n  });\n});\n\ntest(\"Template views add an elementId to child views created using the view helper\", function() {\n  var templates = SC.Object.create({\n    parent: SC.Handlebars.compile('<div>{{view \"TemplateTests.ChildView\"}}</div>'),\n    child: SC.Handlebars.compile(\"I can't believe it's not butter.\")\n  });\n\n  TemplateTests.ChildView = SC.View.extend({\n    templates: templates,\n    templateName: 'child'\n  });\n\n  var view = SC.View.create({\n    templates: templates,\n    templateName: 'parent'\n  });\n\n  view.createElement();\n  var childView = getPath(view, 'childViews.firstObject');\n  equals(view.$().children().first().children().first().attr('id'), get(childView, 'elementId'));\n});\n\ntest(\"Template views set the template of their children to a passed block\", function() {\n  var templates = SC.Object.create({\n    parent: SC.Handlebars.compile('<h1>{{#view \"TemplateTests.NoTemplateView\"}}<span>It worked!</span>{{/view}}</h1>')\n  });\n\n  TemplateTests.NoTemplateView = SC.View.extend();\n\n  var view = SC.View.create({\n    templates: templates,\n    templateName: 'parent'\n  });\n\n  view.createElement();\n  ok(view.$('h1:has(span)').length === 1, \"renders the passed template inside the parent template\");\n});\n\ntest(\"should pass hash arguments to the view object\", function() {\n  TemplateTests.bindTestObject = SC.Object.create({\n    bar: 'bat'\n  });\n\n  TemplateTests.HashArgTemplateView = SC.View.extend({\n  });\n\n  SC.run(function() {\n    view = SC.View.create({\n      template: SC.Handlebars.compile('{{#view TemplateTests.HashArgTemplateView fooBinding=\"TemplateTests.bindTestObject.bar\"}}{{foo}}{{/view}}')\n    });\n\n    view.createElement();\n  });\n\n  equals(view.$().text(), \"bat\", \"prints initial bound value\");\n\n  SC.run(function() { \n    set(TemplateTests.bindTestObject, 'bar', 'brains'); \n  });\n\n  equals(view.$().text(), \"brains\", \"prints updated bound value\");\n});\n\ntest(\"Child views created using the view helper should have their parent view set properly\", function() {\n  TemplateTests = {};\n\n  var template = '{{#view \"SC.View\"}}{{#view \"SC.View\"}}{{view \"SC.View\"}}{{/view}}{{/view}}';\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile(template)\n  });\n\n  view.createElement();\n\n  var childView = view.childViews[0].childViews[0];\n  equals(childView, childView.childViews[0].parentView, 'parent view is correct');\n});\n\ntest(\"Child views created using the view helper should have their IDs registered for events\", function() {\n  TemplateTests = {};\n\n  var template = '{{view \"SC.View\"}}{{view \"SC.View\" id=\"templateViewTest\"}}';\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile(template)\n  });\n\n  view.createElement();\n\n  var childView = view.childViews[0];\n  var id = childView.$()[0].id;\n  equals(SC.View.views[id], childView, 'childView without passed ID is registered with SC.View.views so that it can properly receive events from RootResponder');\n\n  childView = view.childViews[1];\n  id = childView.$()[0].id;\n  equals(id, 'templateViewTest', 'precond -- id of childView should be set correctly');\n  equals(SC.View.views[id], childView, 'childView with passed ID is registered with SC.View.views so that it can properly receive events from RootResponder');\n});\n\ntest(\"Collection views that specify an example view class have their children be of that class\", function() {\n  TemplateTests.ExampleViewCollection = SC.CollectionView.extend({\n    itemViewClass: SC.View.extend({\n      isCustom: true\n    }),\n\n    content: ['foo']\n  });\n\n  var parentView = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.ExampleViewCollection\"}}OHAI{{/collection}}')\n  });\n\n  SC.run(function() {\n    parentView.append();\n  });\n\n  ok(parentView.childViews[0].childViews[0].isCustom, \"uses the example view class\");\n\n  parentView.destroy();\n});\n\ntest(\"itemViewClass works in the #collection helper\", function() {\n  TemplateTests.ExampleController = SC.ArrayProxy.create({\n    content: ['alpha']\n  });\n\n  TemplateTests.ExampleItemView = SC.View.extend({\n    isAlsoCustom: true\n  });\n\n  var parentView = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection contentBinding=\"TemplateTests.ExampleController\" itemViewClass=\"TemplateTests.ExampleItemView\"}}beta{{/collection}}')\n  });\n\n  SC.run(function() {\n    parentView.append();\n  });\n\n  ok(parentView.childViews[0].childViews[0].isAlsoCustom, \"uses the example view class specified in the #collection helper\");\n\n  parentView.destroy();\n});\n\ntest(\"itemViewClass works in the #collection helper relatively\", function() {\n  TemplateTests.ExampleController = SC.ArrayProxy.create({\n    content: ['alpha']\n  });\n\n  TemplateTests.ExampleItemView = SC.View.extend({\n    isAlsoCustom: true\n  });\n\n  TemplateTests.CollectionView = SC.CollectionView.extend({\n    possibleItemView: TemplateTests.ExampleItemView\n  });\n\n  var parentView = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.CollectionView contentBinding=\"TemplateTests.ExampleController\" itemViewClass=\"possibleItemView\"}}beta{{/collection}}')\n  });\n\n  SC.run(function() {\n    parentView.append();\n  });\n\n  ok(parentView.childViews[0].childViews[0].isAlsoCustom, \"uses the example view class specified in the #collection helper\");\n\n  parentView.destroy();\n});\n\ntest(\"should update boundIf blocks if the conditional changes\", function() {\n  var templates = SC.Object.create({\n   foo: SC.Handlebars.compile('<h1 id=\"first\">{{#boundIf \"content.myApp.isEnabled\"}}{{content.wham}}{{/boundIf}}</h1>')\n  });\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates,\n\n    content: SC.Object.create({\n      wham: 'bam',\n      thankYou: \"ma'am\",\n      myApp: SC.Object.create({\n        isEnabled: YES\n      })\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('#first').text(), \"bam\", \"renders block when condition is true\");\n\n  SC.run(function() { \n    setPath(get(view, 'content'), 'myApp.isEnabled', NO); \n  });\n\n  equals(view.$('#first').text(), \"\", \"re-renders without block when condition is false\");\n\n  SC.run(function() { \n    setPath(get(view, 'content'), 'myApp.isEnabled', YES); \n  });\n\n  equals(view.$('#first').text(), \"bam\", \"re-renders block when condition changes to true\");\n});\n\ntest(\"{{view}} id attribute should set id on layer\", function() {\n  var templates = SC.Object.create({\n    foo: SC.Handlebars.compile('{{#view \"TemplateTests.IdView\" id=\"bar\"}}baz{{/view}}')\n  });\n\n  TemplateTests.IdView = SC.View;\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates\n  });\n\n  view.createElement();\n\n  equals(view.$('#bar').length, 1, \"adds id attribute to layer\");\n  equals(view.$('#bar').text(), 'baz', \"emits content\");\n});\n\ntest(\"{{view}} class attribute should set class on layer\", function() {\n  var templates = SC.Object.create({\n    foo: SC.Handlebars.compile('{{#view \"TemplateTests.IdView\" class=\"bar\"}}baz{{/view}}')\n  });\n\n  TemplateTests.IdView = SC.View;\n\n  view = SC.View.create({\n    templateName: 'foo',\n    templates: templates\n  });\n\n  view.createElement();\n\n  equals(view.$('.bar').length, 1, \"adds class attribute to layer\");\n  equals(view.$('.bar').text(), 'baz', \"emits content\");\n});\n\ntest(\"{{view}} should be able to point to a local view\", function() {\n  view = SC.View.create({\n    template: SC.Handlebars.compile(\"{{view common}}\"),\n\n    common: SC.View.extend({\n      template: SC.Handlebars.compile(\"common\")\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$().text(), \"common\", \"tries to look up view name locally\");\n});\n\ntest(\"should be able to bind view class names to properties\", function() {\n  var templates = SC.Object.create({\n    template: SC.Handlebars.compile('{{#view \"TemplateTests.classBindingView\" classBinding=\"isDone\"}}foo{{/view}}')\n  });\n\n  TemplateTests.classBindingView = SC.View.extend({\n    isDone: YES\n  });\n\n  view = SC.View.create({\n    templateName: 'template',\n    templates: templates\n  });\n\n  view.createElement();\n\n  equals(view.$('.is-done').length, 1, \"dasherizes property and sets class name\");\n\n  SC.run(function() {\n    set(view.childViews[0], 'isDone', NO);\n  });\n\n  equals(view.$('.is-done').length, 0, \"removes class name if bound property is set to false\");\n});\n\ntest(\"should be able to bind element attributes using {{bindAttr}}\", function() {\n  var template = SC.Handlebars.compile('<img {{bindAttr src=\"content.url\" alt=\"content.title\"}}>');\n\n  view = SC.View.create({\n    template: template,\n    content: SC.Object.create({\n      url: \"http://www.sproutcore.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('img').attr('src'), \"http://www.sproutcore.com/assets/images/logo.png\", \"sets src attribute\");\n  equals(view.$('img').attr('alt'), \"The SproutCore Logo\", \"sets alt attribute\");\n\n  SC.run(function() {\n    setPath(view, 'content.title', \"El logo de Esproutcore\");\n  });\n\n  equals(view.$('img').attr('alt'), \"El logo de Esproutcore\", \"updates alt attribute when content's title attribute changes\");\n\n  SC.run(function() {\n    set(view, 'content', SC.Object.create({\n      url: \"http://www.thegooglez.com/theydonnothing\",\n      title: \"I CAN HAZ SEARCH\"\n    }));\n  });\n\n  equals(view.$('img').attr('alt'), \"I CAN HAZ SEARCH\", \"updates alt attribute when content object changes\");\n\n  SC.run(function() {\n    set(view, 'content', {\n      url: \"http://www.sproutcore.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    });\n  });\n\n  equals(view.$('img').attr('alt'), \"The SproutCore Logo\", \"updates alt attribute when content object is a hash\");\n\n  SC.run(function() {\n    set(view, 'content', SC.Object.create({\n      url: \"http://www.sproutcore.com/assets/images/logo.png\",\n      title: SC.computed(function() {\n        return \"Nanananana SproutCore!\";\n      })\n    }));\n  });\n\n  equals(view.$('img').attr('alt'), \"Nanananana SproutCore!\", \"updates alt attribute when title property is computed\");\n});\n\ntest(\"should not reset cursor position when text field receives keyUp event\", function() {\n  view = SC.TextField.create({\n    value: \"Broseidon, King of the Brocean\"\n  });\n\n  SC.run(function() {\n    view.append();\n  });\n\n  view.$().val('Brosiedoon, King of the Brocean');\n  view.$().setCaretPosition(5);\n\n  SC.run(function() {\n    view.keyUp({});\n  });\n\n  equals(view.$().caretPosition(), 5, \"The keyUp event should not result in the cursor being reset due to the bindAttr observers\");\n\n  view.destroy();\n});\n\ntest(\"should be able to bind element attributes using {{bindAttr}} inside a block\", function() {\n  var template = SC.Handlebars.compile('{{#with content}}<img {{bindAttr src=\"url\" alt=\"title\"}}>{{/with}}');\n\n  view = SC.View.create({\n    template: template,\n    content: SC.Object.create({\n      url: \"http://www.sproutcore.com/assets/images/logo.png\",\n      title: \"The SproutCore Logo\"\n    })\n  });\n\n  view.createElement();\n\n  equals(view.$('img').attr('src'), \"http://www.sproutcore.com/assets/images/logo.png\", \"sets src attribute\");\n  equals(view.$('img').attr('alt'), \"The SproutCore Logo\", \"sets alt attribute\");\n\n  SC.run(function() {\n    setPath(view, 'content.title', \"El logo de Esproutcore\");\n  });\n\n  equals(view.$('img').attr('alt'), \"El logo de Esproutcore\", \"updates alt attribute when content's title attribute changes\");\n});\n\ntest(\"should be able to bind class attribute with {{bindAttr}}\", function() {\n  var template = SC.Handlebars.compile('<img {{bindAttr class=\"foo\"}}>');\n\n  view = SC.View.create({\n    template: template,\n    foo: 'bar'\n  });\n\n  view.createElement();\n\n  equals(view.$('img').attr('class'), 'bar', \"renders class\");\n\n  SC.run(function() {\n    set(view, 'foo', 'baz');\n  });\n\n  equals(view.$('img').attr('class'), 'baz', \"updates class\");\n});\n\ntest(\"should be able to bind boolean element attributes using {{bindAttr}}\", function() {\n  var template = SC.Handlebars.compile('<input type=\"checkbox\" {{bindAttr disabled=\"content.isDisabled\" checked=\"content.isChecked\"}} />');\n  var content = SC.Object.create({\n    isDisabled: false,\n    isChecked: true\n  });\n\n  view = SC.View.create({\n    template: template,\n    content: content\n  });\n\n  view.createElement();\n\n  ok(!view.$('input').attr('disabled'), 'attribute does not exist upon initial render');\n  ok(view.$('input').attr('checked'), 'attribute is present upon initial render');\n\n  SC.run(function() {\n    set(content, 'isDisabled', true);\n    set(content, 'isChecked', false);\n  });\n\n  ok(view.$('input').attr('disabled'), 'attribute exists after update');\n  ok(!view.$('input').attr('checked'), 'attribute is not present after update');\n});\n\ntest(\"should be able to add multiple classes using {{bindAttr class}}\", function() {\n  var template = SC.Handlebars.compile('<div {{bindAttr class=\"content.isAwesomeSauce content.isAlsoCool\"}}></div>');\n  var content = SC.Object.create({\n    isAwesomeSauce: true,\n    isAlsoCool: true\n  });\n\n  view = SC.View.create({\n    template: template,\n    content: content\n  });\n\n  view.createElement();\n\n  ok(view.$('div').hasClass('is-awesome-sauce'), \"dasherizes first property and sets classname\");\n  ok(view.$('div').hasClass('is-also-cool'), \"dasherizes second property and sets classname\");\n\n  SC.run(function() {\n    set(content, 'isAwesomeSauce', false);\n  });\n\n  ok(!view.$('div').hasClass('is-awesome-sauce'), \"removes dasherized class when property is set to false\");\n});\n\ntest(\"should be able to output a property without binding\", function(){\n  var template = SC.Handlebars.compile('<div>{{unbound content.anUnboundString}}</div>');\n  var content = SC.Object.create({\n    anUnboundString: \"No spans here, son.\"\n  });\n\n  view = SC.View.create({\n    template: template,\n    content: content\n  });\n\n  view.createElement();\n\n  equals(view.$('div').html(), \"No spans here, son.\");\n});\n\ntest(\"should be able to choose a tagName other than span\", function(){\n  var template = SC.Handlebars.compile('{{#if content.underwater tagName=\"abbr\"}}Hold your breath.{{/if}}');\n  var content = SC.Object.create({\n      underwater: true\n  });\n\n  view = SC.View.create({\n    template: template,\n    content: content\n  });\n\n  view.createElement();\n\n  equals(view.$('abbr').length, 1);\n});\n\ntest(\"should still get a span by default if tagName isn't specified\", function(){\n  var template = SC.Handlebars.compile('{{#if content.underwater}}Hold your breath.{{/if}}');\n  var content = SC.Object.create({\n      underwater: true\n  });\n\n  view = SC.View.create({\n    template: template,\n    content: content\n  });\n\n  view.createElement();\n\n  equals(view.$('span').length, 1);\n});\n\nvar view;\n\nmodule(\"Templates redrawing and bindings\", {\n  setup: function(){\n    MyApp = SC.Object.create({});\n  },\n  teardown: function(){\n    if (view) view.destroy();\n    window.MyApp = null;\n  }\n});\n\ntest(\"should be able to update when bound property updates\", function(){\n  MyApp.set('controller', SC.Object.create({name: 'first'}))\n  \n  var View = SC.View.extend({\n    template: SC.Handlebars.compile('<i>{{value.name}}, {{computed}}</i>'),\n    valueBinding: 'MyApp.controller',\n    computed: function(){\n      return this.getPath('value.name') + ' - computed';\n    }.property('value')\n  });\n  \n  view = View.create();\n  view.createElement();\n  \n  SC.run.sync();\n  \n  SC.run(function(){\n    MyApp.set('controller', SC.Object.create({\n      name: 'second'\n    }))\n  })\n  \n  \n  equals(view.get('computed'), \"second - computed\", \"view computed properties correctly update\");\n  equals(view.$('i').text(), 'second, second - computed', \"view rerenders when bound properties change\");\n  \n});\n\ntest(\"bindings should be relative to the current context\", function() {\n  view = SC.View.create({\n    museumOpen: true,\n\n    museumDetails: SC.Object.create({\n      name: \"SFMoMA\",\n      price: 20\n    }),\n\n    museumView: SC.View.extend({\n      template: SC.Handlebars.compile('Name: {{name}} Price: ${{dollars}}')\n    }),\n\n    template: SC.Handlebars.compile('{{#if museumOpen}} {{view museumView nameBinding=\"museumDetails.name\" dollarsBinding=\"museumDetails.price\"}} {{/if}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals($.trim(view.$().text()), \"Name: SFMoMA Price: $20\", \"should print baz twice\");\n});\n\n\n// https://github.com/sproutcore/sproutcore20/issues/120\n\ntest(\"should not enter an infinite loop when binding an attribute in Handlebars\", function() {\n  App = SC.Application.create();\n  App.test = SC.Object.create({ href: 'test' });\n  App.Link = SC.View.extend({\n    classNames: ['app-link'],\n    tagName: 'a',\n    attributeBindings: ['href'],\n    href: '#none',\n\n    click: function() {\n      return false;\n    }\n  });\n\n  var parentView = SC.View.create({\n    template: SC.Handlebars.compile('{{#view App.Link hrefBinding=\"App.test.href\"}} Test {{/view}}')\n  });\n\n\n  SC.run(function() {\n    parentView.appendTo('#qunit-fixture');\n    // App.Link.create().appendTo('#qunit-fixture');\n  });\n  // equals(view.$().attr('href'), 'test');\n\n  parentView.destroy();\n\n  App = undefined;\n});\n\n});");spade.register("sproutcore-handlebars/~tests/views/collection_view_test", "(function(require, exports, __module, ARGV, ENV, __filename){// ==========================================================================\n// Project:   SproutCore Handlebar Views\n// Copyright: ©2011 Strobe Inc. and contributors.\n// License:   Licensed under MIT license (see license.js)\n// ==========================================================================\n/*globals TemplateTests */\n\n\nvar set = SC.set, setPath = SC.setPath;\nvar view;\n\nmodule(\"sproutcore-handlebars/tests/views/collection_view_test\", {\n  setup: function() {\n    window.TemplateTests = SC.Namespace.create();\n  },\n  teardown: function() {\n    if (view) {\n      view.destroy();\n    }\n\n    window.TemplateTests = undefined;\n  }\n});\n\ntest(\"passing a block to the collection helper sets it as the template for example views\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo', 'bar', 'baz']\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.CollectionTestView}} <label></label> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('label').length, 3, 'one label element is created for each content item');\n});\n\ntest(\"collection helper should accept relative paths\", function() {\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection collection}} <label></label> {{/collection}}'),\n    collection: SC.CollectionView.extend({\n      tagName: 'ul',\n      content: ['foo', 'bar', 'baz']\n    })\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('label').length, 3, 'one label element is created for each content item');\n});\n\ntest(\"empty views should be removed when content is added to the collection (regression, ht: msofaer)\", function() {\n  window.App = SC.Application.create();\n\n  App.EmptyView = SC.View.extend({\n    template : SC.Handlebars.compile(\"<td>No Rows Yet</td>\")\n  });\n\n  App.ListView = SC.CollectionView.extend({\n    emptyView: App.EmptyView\n  });\n\n  App.ListController = SC.ArrayProxy.create({\n    content : []\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection App.ListView contentBinding=\"App.ListController\" tagName=\"table\"}} <td>{{content.title}}</td> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  SC.run(function() {\n    App.ListController.pushObject({title : \"Go Away, Placeholder Row!\"})\n  });\n\n  equals(view.$('tr').length, 1, 'has one row');\n\n  window.App.destroy();\n});\n\ntest(\"if no content is passed, and no 'else' is specified, nothing is rendered\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: []\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <aside></aside> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('li').length, 0, 'if no \"else\" is specified, nothing is rendered');\n});\n\ntest(\"if no content is passed, and 'else' is specified, the else block is rendered\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: []\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <aside></aside> {{ else }} <del></del> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('li:has(del)').length, 1, 'the else block is rendered');\n});\n\ntest(\"a block passed to a collection helper defaults to the content property of the context\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo', 'bar', 'baz']\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <label>{{content}}</label> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('li:has(label:contains(\"foo\")) + li:has(label:contains(\"bar\")) + li:has(label:contains(\"baz\"))').length, 1, 'one label element is created for each content item');\n});\n\ntest(\"a block passed to a collection helper defaults to the view\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo', 'bar', 'baz']\n  });\n\n  view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\"}} <label>{{content}}</label> {{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n  equals(view.$('li:has(label:contains(\"foo\")) + li:has(label:contains(\"bar\")) + li:has(label:contains(\"baz\"))').length, 1, 'precond - one aside element is created for each content item');\n\n  SC.run(function() {\n    set(view.childViews[0], 'content', []);\n  });\n  equals(view.$('label').length, 0, \"all list item views should be removed from DOM\");\n});\n\ntest(\"should include an id attribute if id is set in the options hash\", function() {\n  TemplateTests.CollectionTestView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo', 'bar', 'baz']\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.CollectionTestView\" id=\"baz\"}}foo{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul#baz').length, 1, \"adds an id attribute\");\n});\n\ntest(\"should give its item views the class specified by itemClass\", function() {\n  TemplateTests.itemClassTestCollectionView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo', 'bar', 'baz']\n  });\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.itemClassTestCollectionView\" itemClass=\"baz\"}}foo{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul li.baz').length, 3, \"adds class attribute\");\n});\n\ntest(\"should give its item views the classBinding specified by itemClassBinding\", function() {\n  TemplateTests.itemClassBindingTestCollectionView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: [SC.Object.create({ isBaz: false }), SC.Object.create({ isBaz: true }), SC.Object.create({ isBaz: true })]\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection \"TemplateTests.itemClassBindingTestCollectionView\" itemClassBinding=\"content.isBaz\"}}foo{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul li.is-baz').length, 2, \"adds class on initial rendering\");\n\n  SC.run(function() {\n    setPath(view.childViews[0], 'content.0.isBaz', true);\n  });\n\n  equals(view.$('ul li.is-baz').length, 3, \"adds class when property changes\");\n\n  SC.run(function() {\n    setPath(view.childViews[0], 'content.0.isBaz', false);\n  });\n\n  equals(view.$('ul li.is-baz').length, 2, \"removes class when property changes\");\n});\n\ntest(\"should work inside a bound {{#if}}\", function() {\n  var testData = [SC.Object.create({ isBaz: false }), SC.Object.create({ isBaz: true }), SC.Object.create({ isBaz: true })];\n  TemplateTests.ifTestCollectionView = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: testData\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#if shouldDisplay}}{{#collection \"TemplateTests.ifTestCollectionView\"}}{{content.isBaz}}{{/collection}}{{/if}}'),\n    shouldDisplay: true\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul li').length, 3, \"renders collection when conditional is true\");\n\n  SC.run(function() { set(view, 'shouldDisplay', NO); });\n  equals(view.$('ul li').length, 0, \"removes collection when conditional changes to false\");\n\n  SC.run(function() { set(view, 'shouldDisplay', YES); });\n  equals(view.$('ul li').length, 3, \"collection renders when conditional changes to true\");\n});\n\ntest(\"should pass content as context when using {{#each}} helper\", function() {\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#each releases}}Mac OS X {{version}}: {{name}} {{/each}}'),\n\n    releases: [ { version: '10.7',\n                  name: 'Lion' },\n                { version: '10.6',\n                  name: 'Snow Leopard' },\n                { version: '10.5',\n                  name: 'Leopard' } ]\n  });\n\n  SC.run(function() { view.appendTo('#qunit-fixture'); });\n\n  equals(view.$().text(), \"Mac OS X 10.7: Lion Mac OS X 10.6: Snow Leopard Mac OS X 10.5: Leopard \", \"prints each item in sequence\");\n});\n\ntest(\"should re-render when the content object changes\", function() {\n  TemplateTests.RerenderTest = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: []\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.RerenderTest}}{{content}}{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  SC.run(function() {\n    set(view.childViews[0], 'content', ['bing', 'bat', 'bang']);\n  });\n\n  SC.run(function() {\n    set(view.childViews[0], 'content', ['ramalamadingdong']);\n  });\n\n  equals(view.$('li').length, 1, \"rerenders with correct number of items\");\n  equals(view.$('li:eq(0)').text(), \"ramalamadingdong\");\n\n});\n\ntest(\"select tagName on collection helper automatically sets child tagName to option\", function() {\n  TemplateTests.RerenderTest = SC.CollectionView.extend({\n    content: ['foo']\n  });\n  \n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.RerenderTest tagName=\"select\"}}{{content}}{{/collection}}')\n  });\n  \n  SC.run(function() {\n    view.appendTo('qunit-fixture');\n  });\n  \n  equals(view.$('option').length, 1, \"renders the correct child tag name\");\n  \n});\n\ntest(\"tagName works in the #collection helper\", function() {\n  TemplateTests.RerenderTest = SC.CollectionView.extend({\n    content: ['foo', 'bar']\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.RerenderTest tagName=\"ol\"}}{{content}}{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ol').length, 1, \"renders the correct tag name\");\n  equals(view.$('li').length, 2, \"rerenders with correct number of items\");\n\n  SC.run(function() {\n    set(view.childViews[0], 'content', ['bing', 'bat', 'bang']);\n  });\n\n  equals(view.$('li').length, 3, \"rerenders with correct number of items\");\n  equals(view.$('li:eq(0)').text(), \"bing\");\n});\n\ntest(\"should render nested collections\", function() {\n\n  TemplateTests.InnerList = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['one','two','three']\n  });\n\n  TemplateTests.OuterList = SC.CollectionView.extend({\n    tagName: 'ul',\n    content: ['foo']\n  });\n\n  var view = SC.View.create({\n    template: SC.Handlebars.compile('{{#collection TemplateTests.OuterList class=\"outer\"}}{{content}}{{#collection TemplateTests.InnerList class=\"inner\"}}{{content}}{{/collection}}{{/collection}}')\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul.outer > li').length, 1, \"renders the outer list with correct number of items\");\n  equals(view.$('ul.inner').length, 1, \"the inner list exsits\");\n  equals(view.$('ul.inner > li').length, 3, \"renders the inner list with correct number of items\");\n\n});\n\ntest(\"should render multiple, bound nested collections (#68)\", function() {\n  var view;\n\n  SC.run(function() {\n    TemplateTests.contentController = SC.ArrayProxy.create({\n      content: ['foo','bar']\n    });\n\n    TemplateTests.InnerList = SC.CollectionView.extend({\n      tagName: 'ul',\n      contentBinding: 'parentView.innerListContent'\n    });\n\n    TemplateTests.OuterListItem = SC.View.extend({\n      template: SC.Handlebars.compile('{{#collection TemplateTests.InnerList class=\"inner\"}}{{content}}{{/collection}}{{content}}'),\n      innerListContent: function() { return [1,2,3]; }.property().cacheable()\n    });\n\n    TemplateTests.OuterList = SC.CollectionView.extend({\n      tagName: 'ul',\n      contentBinding: 'TemplateTests.contentController',\n      itemViewClass: TemplateTests.OuterListItem\n    });\n\n    view = SC.View.create({\n      template: SC.Handlebars.compile('{{collection TemplateTests.OuterList class=\"outer\"}}')\n    });\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$('ul.outer > li').length, 2, \"renders the outer list with correct number of items\");\n  equals(view.$('ul.inner').length, 2, \"renders the correct number of inner lists\");\n  equals(view.$('ul.inner:first > li').length, 3, \"renders the first inner list with correct number of items\");\n  equals(view.$('ul.inner:last > li').length, 3, \"renders the second list with correct number of items\");\n\n});\n\ntest(\"should allow view objects to be swapped out without throwing an error (#78)\", function() {\n  var view, dataset, secondDataset;\n\n  SC.run(function() {\n    TemplateTests.datasetController = SC.Object.create();\n\n    TemplateTests.ReportingView = SC.View.extend({\n      datasetBinding: 'TemplateTests.datasetController*dataset',\n      readyBinding: 'dataset.ready',\n      itemsBinding: 'dataset.items',\n      template: SC.Handlebars.compile(\"{{#if ready}}{{collection TemplateTests.CollectionView}}{{else}}Loading{{/if}}\")\n    });\n\n    TemplateTests.CollectionView = SC.CollectionView.extend({\n      contentBinding: 'parentView.parentView.items',\n      tagName: 'ul',\n      template: SC.Handlebars.compile(\"{{content}}\")\n    });\n\n    view = TemplateTests.ReportingView.create();\n  });\n\n  SC.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n\n  equals(view.$().text(), \"Loading\", \"renders the loading text when the dataset is not ready\");\n\n  SC.run(function() {\n    dataset = SC.Object.create({\n      ready: true,\n      items: [1,2,3]\n    });\n    TemplateTests.datasetController.set('dataset',dataset);\n  });\n\n  equals(view.$('ul > li').length, 3, \"renders the collection with the correct number of items when the dataset is ready\");\n\n  SC.run(function() {\n    secondDataset = SC.Object.create({ready: false});\n    TemplateTests.datasetController.set('dataset',secondDataset);\n  });\n\n  equals(view.$().text(), \"Loading\", \"renders the loading text when the second dataset is not ready\");\n\n});\n\n\n});");